// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Next Auth provider

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application models

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  projects      Project[]
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

model Task {
  id            String    @id @default(cuid())
  name          String
  description   String
  startDate     DateTime
  endDate       DateTime?
  isDone        Boolean   @default(false)
  priority      Priority
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  area          Area?     @relation(fields: [areaId], references: [id])
  areaId        String?
  project       Project?  @relation(fields: [projectId], references: [id])
  projectId     String?
  createdAt     DateTime  @default(now())
  deletedAt     DateTime
}

model Area {
  id            String    @id @default(cuid())
  name          String
  tasks         Task[]
  projects      Project[]
}

model Project {
  id            String    @id @default(cuid())
  name          String
  description   String
  startDate     DateTime
  endDate       DateTime?
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  area          Area?      @relation(fields: [areaId], references: [id])
  areaId        String?
  tasks         Task[]
  createdAt     DateTime   @default(now())
  deletedAt     DateTime
}